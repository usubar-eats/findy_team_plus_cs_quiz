import { Question } from '@/types/quiz';

export const questions: Question[] = [
  // 開発プロセス（10問）
  {
    text: 'アジャイル開発における「スプリント」とは何を指しますか？',
    choices: [
      '開発チームの休憩時間',
      '一定期間の開発サイクル',
      'バグ修正の期間',
      'プロジェクトの最終段階'
    ],
    correctIndex: 1,
    explanation: 'スプリントは、アジャイル開発における一定期間（通常2-4週間）の開発サイクルを指します。この期間中にチームは計画、開発、テスト、振り返りを行い、動作するソフトウェアを提供します。'
  },
  {
    text: 'MVPの主な目的は何ですか？',
    choices: [
      '完璧な製品を作ること',
      'できるだけ多くの機能を実装すること',
      '最小限の機能で顧客フィードバックを得ること',
      '開発コストを最小化すること'
    ],
    correctIndex: 2,
    explanation: 'MVP（Minimum Viable Product）の主な目的は、製品の核となる価値を最小限の機能で実現し、早期に顧客フィードバックを得ることです。これにより、市場ニーズの検証と製品の方向性の確認を効率的に行うことができます。'
  },
  {
    text: 'デイリースクラムの主な目的は何ですか？',
    choices: [
      'マネージャーに進捗を報告すること',
      'チーム内の情報共有と障害の早期発見',
      '次のスプリントの計画を立てること',
      '顧客に進捗を報告すること'
    ],
    correctIndex: 1,
    explanation: 'デイリースクラムは、チームメンバー間の情報共有と、開発における障害の早期発見を目的とした短時間のミーティングです。各メンバーが昨日やったこと、今日やること、困っていることを共有し、チームの同期を図ります。'
  },
  {
    text: 'テクニカルデットとは何ですか？',
    choices: [
      '開発ツールのライセンス費用',
      '将来の技術投資計画',
      '後で対処が必要な技術的な課題や負債',
      'サーバーの運用コスト'
    ],
    correctIndex: 2,
    explanation: 'テクニカルデットは、短期的な解決策の選択や品質の妥協によって生じる、将来的に対処が必要となる技術的な負債を指します。放置すると保守性の低下や開発効率の悪化を招くため、計画的な返済（改善）が重要です。'
  },
  {
    text: 'ユーザーストーリーの良い書き方として最も適切なものはどれですか？',
    choices: [
      '「システムはデータを保存する必要がある」',
      '「〜として、〜したい。なぜなら〜だからだ」',
      '「ログイン機能を実装する」',
      '「データベースにユーザー情報を追加する」'
    ],
    correctIndex: 1,
    explanation: 'ユーザーストーリーは「誰が」「何をしたいのか」「なぜそれが必要か」を明確にする形式で書くことが推奨されます。これにより、機能の目的と価値が明確になり、実装の方向性を適切に定めることができます。'
  },
  {
    text: 'カンバンボードにおけるWIP（Work In Progress）制限の目的は何ですか？',
    choices: [
      'チームの作業量を増やすため',
      '同時進行する作業を制限し、効率を上げるため',
      'プロジェクトのコストを管理するため',
      '締め切りを守るため'
    ],
    correctIndex: 1,
    explanation: 'WIP制限は、同時に進行する作業数に上限を設けることで、コンテキストスイッチングのコストを減らし、作業の完了までの時間（リードタイム）を短縮することを目的としています。これにより、フローの効率性が向上します。'
  },
  {
    text: 'リファクタリングを行うべき適切なタイミングはいつですか？',
    choices: [
      'プロジェクトの最後',
      '新機能の開発前のみ',
      'コードの重複や複雑性に気付いたとき、継続的に',
      'バグが発生したときのみ'
    ],
    correctIndex: 2,
    explanation: 'リファクタリングは、コードの品質を維持・向上させるために継続的に行うべき活動です。コードの重複、複雑性の増加、理解しづらい構造に気付いた時点で適切に行うことで、保守性と拡張性を確保できます。'
  },
  {
    text: 'プロジェクトの見積もりにおいて、最も重要な考慮点は何ですか？',
    choices: [
      '顧客の予算に合わせること',
      '不確実性を考慮し、バッファを含めること',
      '過去のプロジェクトと同じ期間にすること',
      '開発者の希望する期間にすること'
    ],
    correctIndex: 1,
    explanation: '見積もりには常に不確実性が伴います。過去の経験や類似プロジェクトを参考にしつつ、リスクや不確実性に対するバッファを適切に含めることで、より現実的な見積もりが可能になります。'
  },
  {
    text: 'コードレビューの主な目的として、最も適切なものはどれですか？',
    choices: [
      '開発者のミスを指摘すること',
      '品質向上とチーム内の知識共有',
      'バグを全て見つけること',
      '開発速度を遅くすること'
    ],
    correctIndex: 1,
    explanation: 'コードレビューの主な目的は、コードの品質向上とチーム内の知識共有です。バグの早期発見も重要ですが、それ以上に設計の改善提案や、チーム内での知識・ベストプラクティスの共有が重要な価値となります。'
  },
  {
    text: 'アジャイル開発における「ベロシティ」とは何を指しますか？',
    choices: [
      'チームの開発スピード',
      '一定期間で完了できる作業量の平均',
      'バグ修正にかかる時間',
      'デプロイの頻度'
    ],
    correctIndex: 1,
    explanation: 'ベロシティは、チームが一定期間（通常はスプリント）で完了できる作業量の平均を指します。ストーリーポイントなどの相対的な指標で測定され、将来の作業量の予測や計画立案に活用されます。'
  },

  // チーム開発とコミュニケーション（10問）
  {
    text: 'チーム内で意見の不一致が発生した場合、最も適切な対応は何ですか？',
    choices: [
      '多数決で決める',
      'マネージャーの判断に従う',
      '建設的な議論を通じて最適な解決策を見出す',
      '意見の対立を避ける'
    ],
    correctIndex: 2,
    explanation: '意見の不一致は、異なる視点や考え方から生まれる貴重な機会です。建設的な議論を通じて各意見の背景や懸念点を理解し、チームとして最適な解決策を見出すことが重要です。'
  },
  {
    text: 'リモートワーク環境での効果的なコミュニケーションのために最も重要な要素は何ですか？',
    choices: [
      '常にオンラインでいること',
      '明確な文書化と非同期コミュニケーション',
      'ビデオ会議の回数を増やすこと',
      '勤務時間を完全に合わせること'
    ],
    correctIndex: 1,
    explanation: 'リモートワークでは、明確な文書化と非同期コミュニケーションが重要です。これにより、時差や個々の作業リズムに関係なく、必要な情報を共有・参照できる環境を整えることができます。'
  },
  {
    text: '新しいチームメンバーのオンボーディングで最も重要な要素は何ですか？',
    choices: [
      '技術的な課題を即座に任せること',
      '段階的な学習と支援体制の整備',
      '厳しい要求を課すこと',
      '独力での適応を求めること'
    ],
    correctIndex: 1,
    explanation: '効果的なオンボーディングには、段階的な学習機会の提供と適切な支援体制が不可欠です。技術面での習熟だけでなく、チームの文化や進め方への理解を深める機会を計画的に設けることが重要です。'
  },
  {
    text: 'チーム内での知識共有を促進するための最も効果的な方法は何ですか？',
    choices: [
      '詳細なドキュメントの作成のみ',
      'ペアプログラミングと定期的な勉強会の実施',
      '個人の学習に任せる',
      '外部研修への参加のみ'
    ],
    correctIndex: 1,
    explanation: 'ペアプログラミングや定期的な勉強会は、実践的な知識共有の場として効果的です。直接的なコミュニケーションを通じて、暗黙知を含む深い理解を促進し、チーム全体の技術力向上につながります。'
  },
  {
    text: 'プロジェクトの進捗が遅れている場合、最も適切な対応は何ですか？',
    choices: [
      '残業を増やす',
      '品質を犠牲にして開発を急ぐ',
      '状況を分析し、スコープや計画の見直しを検討する',
      '新しいメンバーを大量に投入する'
    ],
    correctIndex: 2,
    explanation: '進捗の遅れに対しては、まず原因の分析が重要です。スコープの見直し、優先順位の再検討、リソースの最適化など、持続可能な解決策を検討することで、長期的な成功につながります。'
  },
  {
    text: 'チームの生産性を測る上で最も重要な指標は何ですか？',
    choices: [
      'コードの行数',
      '投入時間',
      '価値のある機能のデリバリー速度',
      'コミット回数'
    ],
    correctIndex: 2,
    explanation: 'チームの生産性は、顧客に価値を届けられる速度で測るべきです。単純なコード量や作業時間ではなく、実際に価値のある機能をどれだけ効率的にデリバリーできているかが重要な指標となります。'
  },
  {
    text: '効果的なフィードバックの特徴として、最も適切なものはどれですか？',
    choices: [
      '一般的な批判',
      '具体的な行動に基づく建設的な提案',
      '個人の性格への言及',
      '結果のみの指摘'
    ],
    correctIndex: 1,
    explanation: '効果的なフィードバックは、具体的な行動や事実に基づき、改善のための建設的な提案を含むものです。これにより、受け手は何をどのように改善できるかを明確に理解できます。'
  },
  {
    text: 'チーム内での心理的安全性を高めるために、リーダーがすべき最も重要な行動は何ですか？',
    choices: [
      '失敗を厳しく指摘する',
      '自身の失敗も共有し、学びとして扱う',
      '問題を隠蔽する',
      '完璧な成果のみを求める'
    ],
    correctIndex: 1,
    explanation: 'リーダーが自身の失敗も共有し、それを学びの機会として扱うことで、チームメンバーも失敗を恐れずにチャレンジできる環境が作られます。これが心理的安全性の基盤となります。'
  },
  {
    text: 'チーム間の依存関係を管理する上で最も効果的な方法は何ですか？',
    choices: [
      '依存関係を完全になくす',
      '定期的なコミュニケーションと明確な合意形成',
      'マネージャーに全て任せる',
      '必要になるまで放置する'
    ],
    correctIndex: 1,
    explanation: 'チーム間の依存関係は適切に管理することが重要です。定期的なコミュニケーションを通じて期待値を合わせ、明確な合意を形成することで、スムーズな協働が可能になります。'
  },
  {
    text: 'プロジェクトのステークホルダーとのコミュニケーションで最も重要な要素は何ですか？',
    choices: [
      '技術的な詳細の説明',
      '定期的な状況共有と期待値の調整',
      '問題の隠蔽',
      '形式的な報告のみ'
    ],
    correctIndex: 1,
    explanation: 'ステークホルダーとの効果的なコミュニケーションには、定期的な状況共有と期待値の調整が不可欠です。進捗、リスク、課題を適切に共有し、必要に応じて計画を調整することで、プロジェクトの成功確率が高まります。'
  },

  // 品質管理とテスト（10問）
  {
    text: 'テストピラミッドにおいて、最も数が多くあるべきテストは何ですか？',
    choices: [
      'E2Eテスト',
      'ユニットテスト',
      '結合テスト',
      'UIテスト'
    ],
    correctIndex: 1,
    explanation: 'テストピラミッドでは、実行速度が速く保守が容易なユニットテストを最も多く実装し、上位のテスト（結合テスト、E2Eテスト）は必要最小限にすることを推奨しています。これにより、効率的なテスト戦略を実現できます。'
  },
  {
    text: '継続的インテグレーション（CI）の主な目的は何ですか？',
    choices: [
      'コストの削減',
      '開発速度の向上',
      '早期の問題発見と品質維持',
      'チーム間の競争促進'
    ],
    correctIndex: 2,
    explanation: 'CIの主な目的は、コードの変更を頻繁に統合し、自動テストを実行することで、問題を早期に発見し、ソフトウェアの品質を維持することです。これにより、統合に関する問題のリスクを低減できます。'
  },
  {
    text: 'コードカバレッジの指標として最も重要なものは何ですか？',
    choices: [
      '行カバレッジ',
      'ブランチカバレッジ',
      '意味のある機能テストの充実度',
      'ステートメントカバレッジ'
    ],
    correctIndex: 2,
    explanation: 'コードカバレッジは重要な指標ですが、単なる数値的なカバレッジよりも、実際のユースケースや重要な機能パスをカバーする意味のあるテストの充実度の方が、品質保証の観点では重要です。'
  },
  {
    text: 'テスト駆動開発（TDD）のサイクルとして正しい順序は何ですか？',
    choices: [
      'コード作成→テスト作成→リファクタリング',
      'テスト作成→コード作成→リファクタリング',
      'リファクタリング→テスト作成→コード作成',
      'テスト作成→リファクタリング→コード作成'
    ],
    correctIndex: 1,
    explanation: 'TDDは「テスト作成（Red）→コード作成（Green）→リファクタリング（Refactor）」のサイクルで進めます。まずテストを書いて失敗を確認し、それを通過させるコードを書き、最後に品質を改善します。'
  },
  {
    text: '品質管理において「技術的負債」を防ぐための最も効果的な方法は何ですか？',
    choices: [
      '開発速度を落とす',
      '定期的なコードレビューとリファクタリング',
      '外部委託の活用',
      'テストの省略'
    ],
    correctIndex: 1,
    explanation: '技術的負債を防ぐには、定期的なコードレビューとリファクタリングが効果的です。これにより、コードの品質を継続的に監視・改善し、負債の蓄積を防ぐことができます。'
  },
  {
    text: 'ペアプログラミングの主な利点は何ですか？',
    choices: [
      '開発速度の向上のみ',
      'コストの削減',
      '知識共有とバグの早期発見',
      '作業量の削減'
    ],
    correctIndex: 2,
    explanation: 'ペアプログラミングは、知識共有の促進とバグの早期発見に効果的です。二人で考えることで、より良い設計や実装の選択肢を検討でき、また問題点も早期に気付くことができます。'
  },
  {
    text: '効果的なバグ報告に必要な要素として、最も重要なものは何ですか？',
    choices: [
      '発見者の名前',
      '再現手順と期待される動作',
      'バグの修正案',
      '発見時刻'
    ],
    correctIndex: 1,
    explanation: '効果的なバグ報告には、問題を再現するための明確な手順と、期待される正しい動作の説明が不可欠です。これにより、開発者が問題を理解し、適切な対応を取ることができます。'
  },
  {
    text: 'パフォーマンステストを実施するべき最適なタイミングは？',
    choices: [
      'リリース直前のみ',
      '開発初期のみ',
      '定期的な実施と重要な変更時',
      'ユーザーから苦情があった時のみ'
    ],
    correctIndex: 2,
    explanation: 'パフォーマンステストは、定期的な実施と重要な変更時の両方で行うべきです。これにより、性能劣化を早期に発見し、必要な対策を講じることができます。'
  },
  {
    text: 'コードレビューで最も注目すべき点は何ですか？',
    choices: [
      'コーディング規約の遵守のみ',
      '可読性、保守性、セキュリティ',
      'バグの完全な除去',
      'パフォーマンスの最適化のみ'
    ],
    correctIndex: 1,
    explanation: 'コードレビューでは、コードの可読性、保守性、セキュリティに重点を置くべきです。これらは長期的なコードの品質と保守性に大きく影響する要素です。'
  },
  {
    text: 'QAプロセスを改善するための最も効果的なアプローチは何ですか？',
    choices: [
      'テスト工数の増加',
      '自動化とプロセスの継続的改善',
      'マニュアルテストの増加',
      'テスト担当者の増員'
    ],
    correctIndex: 1,
    explanation: 'QAプロセスの改善には、適切な自動化の導入とプロセスの継続的な改善が効果的です。これにより、テストの効率性と信頼性を向上させることができます。'
  },

  // DORA MetricsとFour Keys（10問）
  {
    text: 'DORA（DevOps Research and Assessment）の4つの主要メトリクスとして、含まれないものはどれですか？',
    choices: [
      'デプロイ頻度',
      'リードタイム',
      'MTTR（Mean Time To Recovery）',
      'コードカバレッジ率'
    ],
    correctIndex: 3,
    explanation: 'DORAの4つの主要メトリクスは、「デプロイ頻度」「リードタイム」「MTTR（Mean Time To Recovery）」「変更失敗率」です。コードカバレッジ率は含まれません。'
  },
  {
    text: 'Four Keysにおける「デプロイ頻度」の"Elite"パフォーマンスの基準は何ですか？',
    choices: [
      '週に1回以上',
      '月に1-2回',
      '1日に複数回',
      '半年に1回以上'
    ],
    correctIndex: 2,
    explanation: 'Four Keysにおける"Elite"パフォーマンスのデプロイ頻度は「1日に複数回」です。これは高度な自動化とCI/CDパイプラインの整備により実現されます。'
  },
  {
    text: 'リードタイム（変更のリードタイム）の計測において、開始点として最も適切なものは何ですか？',
    choices: [
      'プロダクトバックログへの追加時点',
      'コーディング開始時点',
      '最初のコミット時点',
      'レビュー開始時点'
    ],
    correctIndex: 2,
    explanation: 'リードタイムは「最初のコミットから本番環境へのデプロイまでの時間」を測定します。これは開発者の作業開始から価値提供までの効率性を示す指標です。'
  },
  {
    text: '変更失敗率（Change Failure Rate）の改善に最も効果的なアプローチは何ですか？',
    choices: [
      'デプロイ頻度を下げる',
      '自動テストの強化とカナリアリリースの導入',
      'マニュアルテストの増加',
      'リリース承認プロセスの厳格化'
    ],
    correctIndex: 1,
    explanation: '変更失敗率の改善には、自動テストの充実化とカナリアリリースなどの段階的デプロイ戦略の導入が効果的です。これにより、問題の早期発見と影響範囲の制限が可能になります。'
  },
  {
    text: 'MTTRの測定において、「復旧時間」の終了点として最も適切なものは何ですか？',
    choices: [
      'バグ修正コードのコミット時点',
      'ホットフィックスのデプロイ完了時点',
      'サービスの正常動作確認時点',
      'インシデントチケットのクローズ時点'
    ],
    correctIndex: 2,
    explanation: 'MTTRの「復旧時間」は、サービスが正常に動作していることが確認された時点までを指します。単なるデプロイ完了ではなく、実際のサービス復旧が重要です。'
  },
  {
    text: 'Four Keysの指標を改善する際、最初に注目すべき指標は何ですか？',
    choices: [
      'MTTR',
      'デプロイ頻度',
      '変更失敗率',
      'リードタイム'
    ],
    correctIndex: 1,
    explanation: 'デプロイ頻度は他の指標の改善の基礎となります。小規模な変更を頻繁にデプロイすることで、リスクの低減、フィードバックの迅速化、問題の早期発見が可能になります。'
  },
  {
    text: 'リードタイムとMTTRの関係について、正しい説明はどれですか？',
    choices: [
      '常に反比例の関係にある',
      '相関関係はない',
      'リードタイムの短縮がMTTRの改善につながることが多い',
      'MTTRの改善がリードタイムを長くする'
    ],
    correctIndex: 2,
    explanation: 'リードタイムの短縮（小規模な変更の迅速なデプロイ）は、問題の特定と修正を容易にし、結果としてMTTRの改善につながることが多いです。'
  },
  {
    text: 'デプロイ頻度を上げる際に、最も注意すべき点は何ですか？',
    choices: [
      'コストの増加',
      '自動化の整備とテスト品質の確保',
      'チーム人数の増加',
      'マニュアル作業の増加'
    ],
    correctIndex: 1,
    explanation: 'デプロイ頻度を安全に上げるには、CI/CDパイプラインの整備と信頼性の高い自動テストの実装が不可欠です。これにより、品質を維持しながら頻繁なデプロイが可能になります。'
  },
  {
    text: '変更失敗率が高い場合、最初に確認すべき項目は何ですか？',
    choices: [
      'チームの技術力',
      'テストカバレッジ',
      '変更の規模と複雑性',
      'デプロイツールの性能'
    ],
    correctIndex: 2,
    explanation: '変更失敗率が高い場合、まず変更の規模と複雑性を確認します。大規模で複雑な変更は失敗リスクが高いため、小規模な変更に分割することで、リスクを低減できます。'
  },
  {
    text: 'Four Keysの指標改善が組織にもたらす最も重要な価値は何ですか？',
    choices: [
      '開発コストの削減',
      '市場投入までの時間短縮と品質向上の両立',
      'チーム規模の最適化',
      '技術的負債の完全な解消'
    ],
    correctIndex: 1,
    explanation: 'Four Keysの指標改善は、市場投入までの時間短縮（スピード）と品質向上（安定性）の両立を可能にします。これにより、ビジネス価値の迅速な提供と顧客満足度の向上が実現できます。'
  }
]; // BUILD_ID: 1744021861
